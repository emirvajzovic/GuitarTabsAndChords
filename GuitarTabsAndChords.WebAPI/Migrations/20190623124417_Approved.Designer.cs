// <auto-generated />
using System;
using GuitarTabsAndChords.WebAPI.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GuitarTabsAndChords.WebAPI.Migrations
{
    [DbContext(typeof(GuitarTabsContext))]
    [Migration("20190623124417_Approved")]
    partial class Approved
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.Albums", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("AlbumCover");

                    b.Property<bool>("Approved");

                    b.Property<int>("ArtistId");

                    b.Property<string>("Name");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.Artists", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.Favorites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TabId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TabId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.Genres", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlbumsId");

                    b.Property<bool>("Approved");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("AlbumsId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.Ratings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Rating");

                    b.Property<int>("TabId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TabId");

                    b.HasIndex("UserId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.Songs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlbumId");

                    b.Property<bool>("Approved");

                    b.Property<int>("ArtistId");

                    b.Property<int>("GenreId");

                    b.Property<string>("Name");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("GenreId");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.TabCorrections", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved");

                    b.Property<DateTime>("DateSubmitted");

                    b.Property<string>("Notation");

                    b.Property<int>("TabId");

                    b.Property<int>("TuningId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("TabId");

                    b.HasIndex("TuningId");

                    b.HasIndex("UserId");

                    b.ToTable("TabCorrections");
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.Tabs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved");

                    b.Property<DateTime>("DateAdded");

                    b.Property<int>("LastEditorId");

                    b.Property<DateTime>("LastEditted");

                    b.Property<string>("Notation");

                    b.Property<int>("SongId");

                    b.Property<int>("TuningId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LastEditorId");

                    b.HasIndex("SongId");

                    b.HasIndex("TuningId");

                    b.HasIndex("UserId");

                    b.ToTable("Tabs");
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.Tunings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Approved");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Tunings");
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<DateTime>("DateRegistered");

                    b.Property<string>("Email");

                    b.Property<DateTime>("LastLogin");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordSalt");

                    b.Property<int>("RoleId");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.Albums", b =>
                {
                    b.HasOne("GuitarTabsAndChords.WebAPI.Database.Artists", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.Favorites", b =>
                {
                    b.HasOne("GuitarTabsAndChords.WebAPI.Database.Tabs", "Tab")
                        .WithMany()
                        .HasForeignKey("TabId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GuitarTabsAndChords.WebAPI.Database.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.Genres", b =>
                {
                    b.HasOne("GuitarTabsAndChords.WebAPI.Database.Albums")
                        .WithMany("Genres")
                        .HasForeignKey("AlbumsId");
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.Ratings", b =>
                {
                    b.HasOne("GuitarTabsAndChords.WebAPI.Database.Tabs", "Tab")
                        .WithMany()
                        .HasForeignKey("TabId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GuitarTabsAndChords.WebAPI.Database.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.Songs", b =>
                {
                    b.HasOne("GuitarTabsAndChords.WebAPI.Database.Albums", "Album")
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GuitarTabsAndChords.WebAPI.Database.Artists", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GuitarTabsAndChords.WebAPI.Database.Genres", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.TabCorrections", b =>
                {
                    b.HasOne("GuitarTabsAndChords.WebAPI.Database.Tabs", "Tab")
                        .WithMany()
                        .HasForeignKey("TabId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GuitarTabsAndChords.WebAPI.Database.Tunings", "Tuning")
                        .WithMany()
                        .HasForeignKey("TuningId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GuitarTabsAndChords.WebAPI.Database.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.Tabs", b =>
                {
                    b.HasOne("GuitarTabsAndChords.WebAPI.Database.Users", "LastEditor")
                        .WithMany()
                        .HasForeignKey("LastEditorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GuitarTabsAndChords.WebAPI.Database.Songs", "Song")
                        .WithMany()
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GuitarTabsAndChords.WebAPI.Database.Tunings", "Tuning")
                        .WithMany()
                        .HasForeignKey("TuningId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GuitarTabsAndChords.WebAPI.Database.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GuitarTabsAndChords.WebAPI.Database.Users", b =>
                {
                    b.HasOne("GuitarTabsAndChords.WebAPI.Database.Roles", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
